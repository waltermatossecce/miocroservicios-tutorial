package com.usuario.service.secutity;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParser;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class WebSecurityConfig {

	@Bean
	SecurityFilterChain filterChain(HttpSecurity http,AuthenticationManager authenticationManager) throws Exception{
		return http
				.csrf().disable()
				.authorizeRequests()
				.anyRequest()
				.authenticated()
				.and()
				.httpBasic()
				.and()
				.sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
				.and()
				.build();
	}
  @Bean
  UserDetailsService detailsService() {
	  InMemoryUserDetailsManager manager=new InMemoryUserDetailsManager();
	  manager.createUser(User.withUsername("admin")
	  .password(passwordEncoder().encode("admin"))
	  .roles()
	  .build());
	return manager;
  }
  
  @Bean
  @AuthenticationManager autoManager(HttpSecurity httpSecurity,PasswordEncoder encoder){
	  return httpSecurity.getSharedObject(AuthenticationManagerBuilder.class)
			  .userDetailsService(detailsService())
			  .passwordEncoder(encoder())
			  .
   }
  
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}
